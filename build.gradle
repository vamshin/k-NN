/*
 *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

buildscript {
  ext {
    es_version = project.property("es.version")
    es_group = "org.elasticsearch"
    offlineRepositoryRoot = rootProject.file("${rootDir.parentFile}/offline-repo").absolutePath
    es_distribution = 'oss-zip'
    distribution = es_distribution
  }

    apply from: 'build-tools/amazon-sandbox.gradle'
    apply from: 'build-tools/repositories.gradle'

  // This isn't applying from repositories.gradle so repeating it here
  repositories {
    if (sandboxedBuild) {
      maven { url offlineRepositoryRoot }
    } else {
      mavenCentral()
      maven { url "https://plugins.gradle.org/m2/" }
    }
  }

  dependencies {
    classpath "${es_group}.gradle:build-tools:${es_version}"
  }
}
//****************************************************************************/
// Build configurations
//****************************************************************************/

plugins {
    id 'java-library'
}

allprojects {
    group = 'com.amazon.opendistroforelasticsearch'
    version = "${es_version}"

    apply from: 'build-tools/repositories.gradle'
    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "1.8"
    }
}

apply from: 'build-tools/brazil.gradle'
apply plugin: 'elasticsearch.esplugin'

apply from: 'build-tools/prepare-offline-repo.gradle'

ext {
  projectSubstitutions = [:]
  licenseFile = rootProject.file('LICENSE.TXT')
  noticeFile = rootProject.file('NOTICE')
}

esplugin {
  name 'opendistro-knn' // zip file name and plugin name in ${elasticsearch.plugin.name} read by ES when plugin loading
  description 'Open Distro for Elasticsearch KNN'
  classname 'org.elasticsearch.plugin.knn.KNNPlugin'
}

task release(type: Copy, group: 'build') {
  dependsOn allprojects*.tasks.build
  from(zipTree(project.tasks.bundlePlugin.outputs.files.getSingleFile()))
  into "build/plugins/opendistro-knn"
  includeEmptyDirs = false
  // ES versions < 6.3 have a top-level elasticsearch directory inside the plugin zip which we need to remove
  eachFile { it.path = it.path - "elasticsearch/" }
}

//****************************************************************************/
// Dependencies
//****************************************************************************/
dependencies {
}

licenseFile = rootProject.file('LICENSE.txt')
noticeFile = rootProject.file('NOTICE.txt')

licenseHeaders.enabled = false
dependencyLicenses.enabled = false
thirdPartyAudit.enabled = false

//****************************************************************************/
// test configurations
//****************************************************************************/


test {
    systemProperty 'tests.security.manager', 'false'
    systemProperty('project.root', project.rootDir.absolutePath)
}

integTestRunner {
  distribution = es_distribution
  // add "-Dtests.security.manager=false" to VM options if you want to run integ tests in IntelliJ
  systemProperty 'tests.security.manager', 'false'

  // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
  // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
  doFirst { systemProperty 'cluster.debug', integTestCluster.debug }

  // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
  if (System.getProperty("test.debug") != null) {
    jvmArg '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
  }

  // allows integration test classes to access test resource from project root path
  systemProperty('project.root', project.rootDir.absolutePath)
}

integTestCluster {
  distribution = es_distribution
}

run {
  distribution = es_distribution
}

checkstyleMain.ignoreFailures = true
checkstyleTest.ignoreFailures = true
